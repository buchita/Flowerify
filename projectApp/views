from projectApp.models import Flower, TrainModel
from django.shortcuts import render
from django.core.files.storage import FileSystemStorage
from projectApp.machineLearning.image_quality_assessment import image_quality, stringToRGB
import base64
from projectApp.machineLearning.random_forest import classifier
from projectApp.machineLearning.dataset_filter import filter

# fetch image and text for each flower
def home(request):
    # instantiate the flower
    obj1 = Flower.objects.get(id=1)
    # convert from blob to string
    image_data1 = base64.b64encode(obj1.image).decode()

    data1 = {
        'flowerName': obj1.name,
        'image': image_data1
    }

    obj2 = Flower.objects.get(id=2)
    image_data2 = base64.b64encode(obj2.image).decode()

    data2 = {
        'flowerName': obj2.name,
        'image': image_data2
    }

    obj3 = Flower.objects.get(id=3)
    image_data3 = base64.b64encode(obj3.image).decode()

    data3 = {
        'flowerName': obj3.name,
        'image': image_data3
    }

    obj4 = Flower.objects.get(id=4)
    image_data4 = base64.b64encode(obj4.image).decode()

    data4 = {
        'flowerName': obj4.name,
        'image': image_data4
    }

    obj5 = Flower.objects.get(id=5)
    image_data5 = base64.b64encode(obj5.image).decode()

    data5 = {
        'flowerName': obj5.name,
        'image': image_data5
    }

    obj6 = Flower.objects.get(id=6)
    image_data6 = base64.b64encode(obj6.image).decode()

    data6 = {
        'flowerName': obj6.name,
        'image': image_data6
    }


    obj7 = Flower.objects.get(id=7)
    image_data7 = base64.b64encode(obj7.image).decode()

    data7 = {
        'flowerName': obj7.name,
        'image': image_data7
    }


    obj8 = Flower.objects.get(id=8)
    image_data8 = base64.b64encode(obj8.image).decode()

    data8 = {
        'flowerName': obj8.name,
        'image': image_data8
    }



    obj9 = Flower.objects.get(id=9)
    image_data9 = base64.b64encode(obj9.image).decode()

    data9 = {
        'flowerName': obj9.name,
        'image': image_data9
    }

    obj10 = Flower.objects.get(id=10)
    image_data10 = base64.b64encode(obj10.image).decode()

    data10 = {
        'flowerName': obj10.name,
        'image': image_data10
    }

    # populate the key to be used in html
    data_array = [data1, data2, data3, data4, data5, data6, data7, data8, data9, data10]
    data_dict = {}
    index = 1
    for x in data_array:
        key = "key" + '_' + str(index)
        data_dict[key] = x
        index = index + 1

    return render(request, 'home.html',
                  data_dict)


# https://docs.djangoproject.com/en/3.0/topics/http/file-uploads/
def upload_file(request):
    context = {}


    extension =".jpg"

    # when submitted
    if request.method == 'POST':

        # if file is selected
        if len(request.FILES) != 0:
            uploaded_file = request.FILES['document']

            # check if the file ends with jpg
            if str(uploaded_file).endswith(extension):

                # declare file storage
                fs = FileSystemStorage()

                # save the file into the default location which is MEDIA_ROOT
                # path of MEDIA_ROOT is declared in setting.py
                name = fs.save(uploaded_file.name, uploaded_file)
                url = fs.url(name)

                # filter the RGB values
                tag_name = filter(url)
                # check quality of the image
                result = image_quality(url)

                base64_im_ar = []
                dataset_target = []
                dataset_numpy = []

                # if list of matched RGB is empty
                if not tag_name:
                    print("not statement, empty")
                    for i in TrainModel.objects.all():
                        image_data = ""
                        image_data = base64.b64encode(i.image_dataset).decode()
                        base64_im_ar.append(image_data)

                        # convert from base 64 to numpy
                        numpy_arr_image = stringToRGB(image_data)
                        dataset_target.append(i.id)
                        dataset_numpy.append(numpy_arr_image)
                # if there is some matching from RGB
                else:
                    for i in TrainModel.objects.all():
                        for j in tag_name:
                            if i.id == j:

                                print(i.image_id)
                                image_data = ""
                                image_data = base64.b64encode(i.image_dataset).decode()
                                base64_im_ar.append(image_data)

                                # convert from base 64 to numpy
                                numpy_arr_image = stringToRGB(image_data)
                                dataset_target.append(i.id)
                                dataset_numpy.append(numpy_arr_image)

                predict_result, percent, name = classifier(url, dataset_target, dataset_numpy)

                #get information about the flower
                for i in Flower.objects.all().filter(name=name):

                    description = i.description,
                    planting = i.planting,
                    meaning =  i.meaning,
                    care_information = i.care_information,
                    disease = i.disease,
                    tips = i.tips

                context = { 'url': url, 'result': result, 'predict_result': predict_result, 'percent': percent, 'name': name,
                'description': description, 'planting': planting, 'planting': planting,
                'care_information': care_information, 'disease': disease,
                'tips': tips, 'meaning': meaning}

            else:
                error_text = "Only jpg extension is accepted"
                context = {'error_text': error_text}

        # if file is not selected
        else:
            no_file = "No image is selected. Please select an image"
            context = {'no_file': no_file}

    return render(request, 'uploader.html', context)


# search the db
def keyword_filter(request):
    if request.method == "GET":
        try:
            # get keyword from html
            keyword = request.GET.get('searchkeyword')
            keyword = keyword.lower()

            # search for keyword
            for i in Flower.objects.all().filter(name=keyword):
                image_data = base64.b64encode(i.image).decode()

                filtered = {
                    'description': i.description,
                    'name': i.name,
                    'image': image_data,
                    'planting': i.planting,
                    'meaning': i.meaning,
                    'care_information': i.care_information,
                    'disease': i.disease,
                    'tips': i.tips
                }

        except Flower.DoesNotExist:
            filtered = { 'error':  'this doesnt exist'}

    return render(request, 'display.html', filtered)



# https: // stackoverflow.com / questions / 56138525 / how - to - show - a - blob - image - on - html - page - in -django
# this is the beginning of the reading flower from the database


# To retrieve the information about specific flower
def DaisyInformation(request):
    obj = Flower.objects.get(id=1)
    # The image is stored as longblob in the database.
    # In order to display the image in html, it needs to be decoded to base 64
    image_data = base64.b64encode(obj.image).decode()

    # create a dictionary to store the information
    data = {
        'description': obj.description,
        'name': obj.name,
        'image': image_data,
        'planting': obj.planting,
        'meaning': obj.meaning,
        'care_information': obj.care_information,
        'disease': obj.disease,
        'tips': obj.tips
    }

    # pass the data to daisyinformation page.
    return render(request, 'flower_info_display.html', data)


def BlanketFlower(request):
    # return HttpResponse(index_home)
    # https: // stackoverflow.com / questions / 56138525 / how - to - show - a - blob - image - on - html - page - in -django
    obj = Flower.objects.get(id=2)
    # obj = Flower.objects.all()
    image_data = base64.b64encode(obj.image).decode()

    data = {
        'description': obj.description,
        'name': obj.name,
        'image': image_data,
        'planting': obj.planting,
        'meaning': obj.meaning,
        'care_information': obj.care_information,
        'disease': obj.disease,
        'tips': obj.tips
    }
    # flowers = Flower.objects.all()
    return render(request, 'flower_info_display.html', data)


def Buttercup(request):
    obj = Flower.objects.get(id=3)
    # obj = Flower.objects.all()
    image_data = base64.b64encode(obj.image).decode()

    data = {
        'description': obj.description,
        'name': obj.name,
        'image': image_data,
        'planting': obj.planting,
        'meaning': obj.meaning,
        'care_information': obj.care_information,
        'disease': obj.disease,
        'tips': obj.tips
    }
    # flowers = Flower.objects.all()
    return render(request, 'flower_info_display.html', data)



def Carnation(request):
    obj = Flower.objects.get(id=4)
    # obj = Flower.objects.all()
    image_data = base64.b64encode(obj.image).decode()

    data = {
        'description': obj.description,
        'name': obj.name,
        'image': image_data,
        'planting': obj.planting,
        'meaning': obj.meaning,
        'care_information': obj.care_information,
        'disease': obj.disease,
        'tips': obj.tips
    }
    # flowers = Flower.objects.all()
    return render(request, 'flower_info_display.html', data)


def Dandelion(request):
    obj = Flower.objects.get(id=5)
    # obj = Flower.objects.all()
    image_data = base64.b64encode(obj.image).decode()

    data = {
        'description': obj.description,
        'name': obj.name,
        'image': image_data,
        'planting': obj.planting,
        'meaning': obj.meaning,
        'care_information': obj.care_information,
        'disease': obj.disease,
        'tips': obj.tips
    }
    # flowers = Flower.objects.all()
    return render(request, 'flower_info_display.html', data)


def CornPoppy(request):
    obj = Flower.objects.get(id=6)
    # obj = Flower.objects.all()
    image_data = base64.b64encode(obj.image).decode()

    data = {
        'description': obj.description,
        'name': obj.name,
        'image': image_data,
        'planting': obj.planting,
        'meaning': obj.meaning,
        'care_information': obj.care_information,
        'disease': obj.disease,
        'tips': obj.tips
    }
    # flowers = Flower.objects.all()
    return render(request, 'flower_info_display.html', data)


def Lotus(request):
    obj = Flower.objects.get(id=7)
    # obj = Flower.objects.all()
    image_data = base64.b64encode(obj.image).decode()

    data = {
        'description': obj.description,
        'name': obj.name,
        'image': image_data,
        'planting': obj.planting,
        'meaning': obj.meaning,
        'care_information': obj.care_information,
        'disease': obj.disease,
        'tips': obj.tips
    }
    # flowers = Flower.objects.all()
    return render(request, 'flower_info_display.html', data)


def Marigold(request):
    obj = Flower.objects.get(id=8)
    # obj = Flower.objects.all()
    image_data = base64.b64encode(obj.image).decode()

    data = {
        'description': obj.description,
        'name': obj.name,
        'image': image_data,
        'planting': obj.planting,
        'meaning': obj.meaning,
        'care_information': obj.care_information,
        'disease': obj.disease,
        'tips': obj.tips
    }
    # flowers = Flower.objects.all()
    return render(request, 'flower_info_display.html', data)


def Sunflower(request):
    obj = Flower.objects.get(id=9)
    # obj = Flower.objects.all()
    image_data = base64.b64encode(obj.image).decode()

    data = {
        'description': obj.description,
        'name': obj.name,
        'image': image_data,
        'planting': obj.planting,
        'meaning': obj.meaning,
        'care_information': obj.care_information,
        'disease': obj.disease,
        'tips': obj.tips
    }
    # flowers = Flower.objects.all()
    return render(request, 'flower_info_display.html', data)


def Rose(request):
    obj = Flower.objects.get(id=10)
    # obj = Flower.objects.all()
    image_data = base64.b64encode(obj.image).decode()

    data = {
        'description': obj.description,
        'name': obj.name,
        'image': image_data,
        'planting': obj.planting,
        'meaning': obj.meaning,
        'care_information': obj.care_information,
        'disease': obj.disease,
        'tips': obj.tips
    }
    # flowers = Flower.objects.all()
    return render(request, 'flower_info_display.html', data)
